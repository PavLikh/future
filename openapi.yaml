openapi: 3.0.3
info:
  title: Future - Test assignment
  version: 0.0.1
servers:
  - url: http://localhost:80/api/v1
    description: Dev server
paths:
  /notebook:
    get:
      tags:
        - notes
      summary: Get all notes
      description: Multiple status values can be provided with comma separated strings
      parameters:
        - name: limit
          in: query
          description: Max notes per page
          required: false
          schema:
            type: integer
            format: int32
          example: 5
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notes'
        'default':
          description: Something unexpected
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Error'
    post:
      tags:
        - notes
      summary: Add a new note
      description: Add a new note
      operationId: addNote
      requestBody:
        description: Create a new pet in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Note'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Note'
        'default':
          description: Something unexpected
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Error'
  /notebook/{id}:
    get:
      tags: 
        - notes
      summary: Get one note by id
      description: Multiple status values can be provided with comma separated strings
      operationId: getNoteById
      parameters:
        - name: id
          in: path
          description: Note id
          required: true
          schema:
            type: integer
            format: int64
          example: 123
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Note'
        'default':
          description: Something unexpected
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Error'
    post:
      tags:
        - notes
      summary: Updates a note in the notebook
      description: ''
      operationId: updateNote
      parameters:
        - name: id
          in: path
          description: ID of note that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update a note in the notebook
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Note'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Note'
        'default':
          description: Something unexpected
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Error'

    delete:
      tags:
        - notes
      summary: Deletes a note
      description: delete a note
      operationId: deleteNote
      parameters:
        - name: id
          in: path
          description: Note id
          required: true
          schema:
            type: integer
            format: int64
          example: 123
      responses:
        '200':
          description: successful operation
          content:
            application/json: {}
        'default':
          description: Something unexpected
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Error'

components:
  schemas:
    Note:
      type: object
      required:
        - full_name
        - email
        - phone
      properties:
        id:
          type: integer
          format: int64
          example: 123
        full_name:
          type: string
          example: Ivan Ivanov
        phone:
          type: string
          example: '12345'
        email:
          type: string
          example: john@email.com
        birth_day:
          type: string
          format: 2022-01-01
        photo:
          type: string
          example: https://somesite.net/photo.jpg
    Notes:
      type: array
      items:
        $ref: '#/components/schemas/Note'
    Error:
      type: object
      required:
       - code
       - message
      properties:
        code:
          type: integer
        message:
          type: string
